utils::flush.console()
}
}
}
if (progress) {
cat("\n")
utils::flush.console()
}
r1[r1 > 0] <- 1
dat0 <- datl1
dat0[r1 == 1] <- NA
imp0 <- mice::mice(dat0, maxit = 0, allow.na = TRUE)
imp0
?with.mids
fit2 <- with(data=imp0,exp=glm(T4abuse~T1_abuse,family=binomial))
fit2 <- with(data=imp0,exp=glm(T4_abuse~T1_abuse,family=binomial))
fit2
imp0
View(imp0)
View(a.mids)
View(a.out)
imputations <- list()
imputations[[1]] <- RESULT[1:500,2:5]
imputations[[2]] <- RESULT[501:1000,2:5]
imputations[[3]] <- RESULT[1001:1500,2:5]
# imputations[[1]][2,1] <- NA
# imputations[[1]][10,2]<-NA
# imputations[[1]][22,3]<-NA
# imputations[[1]][45,4]<-NA
imputations[[1]] <- imputations[[1]][-c(328),]
# imputations[[2]][2,1] <- NA
# imputations[[2]][10,2]<-NA
# imputations[[2]][22,3]<-NA
# imputations[[2]][45,4]<-NA
imputations[[2]] <- imputations[[2]][-c(328),]
# imputations[[3]][2,1] <- NA
# imputations[[3]][10,2]<-NA
# imputations[[3]][22,3]<-NA
# imputations[[3]][45,4]<-NA
imputations[[3]] <- imputations[[3]][-c(328),]
datalist2mids(imputations)
colSums(is.na(imputations[[1]]))
colSums(is.na(imputations[[2]]))
colSums(is.na(imputations[[3]]))
a.mids
a.out$imputations[[1]]
dat.list<-a.out
CALL <- match.call()
if (inherits(dat.list, "imputationList")) {
dat.list <- dat.list$imputations
}
M <- length(dat.list)
if (M == 1) {
dat0 <- dat.list[[1]]
dat0[, "__dummy"] <- 1
dat0[1, "__dummy"] <- NA
dat.list <- list(dat0, dat0)
M <- 2
}
datl1 <- dat.list[[1]]
datl1 <- as.data.frame(datl1)
datl2 <- matrix(NA, nrow = nrow(datl1), ncol = ncol(datl1))
colnames(datl2) <- colnames(datl1)
VV <- ncol(datl1)
for (vv in 1:VV) {
datl2[, vv] <- as.vector(datl1[, vv])
}
datl1 <- as.data.frame(datl2)
cM <- colMeans(is.na(datl1))
impvars <- which(cM == 0)
r1 <- 1 * is.na(datl1)
if (M > 1) {
if (progress) {
cat("Analyze missing pattern\n-")
utils::flush.console()
}
for (ii in 2:M) {
datl2 <- dat.list[[ii]]
r1[, impvars] <- r1[, impvars] + 1 * (datl2[, impvars] !=
datl1[, impvars])
datl1 <- datl2
if (progress) {
cat("-")
utils::flush.console()
}
}
}
if (progress) {
cat("\n")
utils::flush.console()
}
r1[r1 > 0] <- 1
dat0 <- datl1
dat0[r1 == 1] <- NA
imp0 <- mice::mice(dat0, maxit = 0, allow.na = TRUE)
iM <- imp0$method
imp0
elimvars <- names(cM)[cM > 0]
elimvars
pM <- imp0$predictorMatrix
pM
if (length(elimvars) > 0) {
iM[elimvars] <- ""
pM[elimvars, ] <- 0
pM[, elimvars] <- 0
}
imp1 <- mice::mice(dat0, maxit = 0, method = iM, predictorMatrix = pM,
m = M, allow.na = TRUE)
imp1
IMP <- imp1$imp
if (progress) {
cat("Create mids object\n")
utils::flush.console()
}
for (ii in 1:M) {
dat.ii <- dat.list[[ii]]
for (vv1 in seq(1, length(impvars))) {
vv <- names(impvars)[vv1]
l1 <- dat.ii[r1[, vv] == 1, vv]
if (length(l1) > 0) {
IMP[[vv]][ii] <- l1
}
}
if (progress) {
cat(".")
utils::flush.console()
}
}
dat.list<-a.out
CALL <- match.call()
if (inherits(dat.list, "imputationList")) {
dat.list <- dat.list$imputations
}
M <- length(dat.list)
if (M == 1) {
dat0 <- dat.list[[1]]
dat0[, "__dummy"] <- 1
dat0[1, "__dummy"] <- NA
dat.list <- list(dat0, dat0)
M <- 2
}
datl1 <- dat.list[[1]]
datl1 <- as.data.frame(datl1)
datl2 <- matrix(NA, nrow = nrow(datl1), ncol = ncol(datl1))
colnames(datl2) <- colnames(datl1)
VV <- ncol(datl1)
for (vv in 1:VV) {
datl2[, vv] <- as.vector(datl1[, vv])
}
datl1 <- as.data.frame(datl2)
cM <- colMeans(is.na(datl1))
impvars <- which(cM == 0)
r1 <- 1 * is.na(datl1)
if (M > 1) {
if (progress) {
cat("Analyze missing pattern\n-")
utils::flush.console()
}
for (ii in 2:M) {
datl2 <- dat.list[[ii]]
r1[, impvars] <- r1[, impvars] + 1 * (datl2[, impvars] !=
datl1[, impvars])
datl1 <- datl2
if (progress) {
cat("-")
utils::flush.console()
}
}
}
if (progress) {
cat("\n")
utils::flush.console()
}
r1[r1 > 0] <- 1
dat0 <- datl1
dat0[r1 == 1] <- NA
imp0 <- mice::mice(dat0, maxit = 0, allow.na = TRUE)
iM <- imp0$method
elimvars <- names(cM)[cM > 0]
pM <- imp0$predictorMatrix
if (length(elimvars) > 0) {
iM[elimvars] <- ""
pM[elimvars, ] <- 0
pM[, elimvars] <- 0
}
imp1 <- mice::mice(dat0, maxit = 0, method = iM, predictorMatrix = pM,
m = M, allow.na = TRUE)
IMP <- imp1$imp
if (progress) {
cat("Create mids object\n")
utils::flush.console()
}
for (ii in 1:M) {
dat.ii <- dat.list[[ii]]
for (vv1 in seq(1, length(impvars))) {
vv <- names(impvars)[vv1]
l1 <- dat.ii[r1[, vv] == 1, vv]
if (length(l1) > 0) {
IMP[[vv]][ii] <- l1
}
}
if (progress) {
cat(".")
utils::flush.console()
}
}
if (progress) {
cat("\n")
}
imp1$imp <- IMP
iM[imp1$nmis == 0] <- ""
iM[imp1$nmis > 0] <- "imputed"
imp1$method <- iM
if (is.numeric(imp1$visitSequence)) {
imp1$visitSequence <- -99 + 0 * imp1$visitSequence
}else{
imp1$visitSequence <- rep("", length(imp1$visitSequence))
}
dat.ii
imp1$imp <- IMP
imp1$imp
imp1$nmis
imp1$predictorMatrix[iM == "", ]
iM <- imp0$method
iM
imp1$nmis == 0
a.mids <- miceadds::datlist2mids( a.out$imputations )
View(a.mids)
CALL <- match.call()
if (inherits(dat.list, "imputationList")) {
dat.list <- dat.list$imputations
}
M <- length(dat.list)
if (M == 1) {
dat0 <- dat.list[[1]]
dat0[, "__dummy"] <- 1
dat0[1, "__dummy"] <- NA
dat.list <- list(dat0, dat0)
M <- 2
}
datl1 <- dat.list[[1]]
datl1 <- as.data.frame(datl1)
datl2 <- matrix(NA, nrow = nrow(datl1), ncol = ncol(datl1))
colnames(datl2) <- colnames(datl1)
VV <- ncol(datl1)
for (vv in 1:VV) {
datl2[, vv] <- as.vector(datl1[, vv])
}
datl1 <- as.data.frame(datl2)
cM <- colMeans(is.na(datl1))
impvars <- which(cM == 0)
r1 <- 1 * is.na(datl1)
if (M > 1) {
if (progress) {
cat("Analyze missing pattern\n-")
utils::flush.console()
}
for (ii in 2:M) {
datl2 <- dat.list[[ii]]
r1[, impvars] <- r1[, impvars] + 1 * (datl2[, impvars] !=
datl1[, impvars])
datl1 <- datl2
if (progress) {
cat("-")
utils::flush.console()
}
}
}
if (progress) {
cat("\n")
utils::flush.console()
}
r1[r1 > 0] <- 1
dat0 <- datl1
dat0[r1 == 1] <- NA
imp0 <- mice::mice(dat0, maxit = 0, allow.na = TRUE)
iM <- imp0$method
elimvars <- names(cM)[cM > 0]
pM <- imp0$predictorMatrix
if (length(elimvars) > 0) {
iM[elimvars] <- ""
pM[elimvars, ] <- 0
pM[, elimvars] <- 0
}
imp1 <- mice::mice(dat0, maxit = 0, method = iM, predictorMatrix = pM,
m = M, allow.na = TRUE)
IMP <- imp1$imp
if (progress) {
cat("Create mids object\n")
utils::flush.console()
}
for (ii in 1:M) {
dat.ii <- dat.list[[ii]]
for (vv1 in seq(1, length(impvars))) {
vv <- names(impvars)[vv1]
l1 <- dat.ii[r1[, vv] == 1, vv]
if (length(l1) > 0) {
IMP[[vv]][ii] <- l1
}
}
if (progress) {
cat(".")
utils::flush.console()
}
}
CALL <- match.call()
if (inherits(dat.list, "imputationList")) {
dat.list <- dat.list$imputations
}
M <- length(dat.list)
if (M == 1) {
dat0 <- dat.list[[1]]
dat0[, "__dummy"] <- 1
dat0[1, "__dummy"] <- NA
dat.list <- list(dat0, dat0)
M <- 2
}
datl1 <- dat.list[[1]]
datl1 <- as.data.frame(datl1)
datl2 <- matrix(NA, nrow = nrow(datl1), ncol = ncol(datl1))
colnames(datl2) <- colnames(datl1)
VV <- ncol(datl1)
for (vv in 1:VV) {
datl2[, vv] <- as.vector(datl1[, vv])
}
datl1 <- as.data.frame(datl2)
cM <- colMeans(is.na(datl1))
impvars <- which(cM == 0)
r1 <- 1 * is.na(datl1)
if (M > 1) {
if (progress) {
cat("Analyze missing pattern\n-")
utils::flush.console()
}
for (ii in 2:M) {
datl2 <- dat.list[[ii]]
r1[, impvars] <- r1[, impvars] + 1 * (datl2[, impvars] !=
datl1[, impvars])
datl1 <- datl2
if (progress) {
cat("-")
utils::flush.console()
}
}
}
M
length(dat.list)
dat.list<-a.mids
length(dat.list)
dat.list<-a.out
length(dat.list)
inherits(dat.list, "imputationList")
dat.list<-a.out$imputations
length(dat.list)
CALL <- match.call()
if (inherits(dat.list, "imputationList")) {
dat.list <- dat.list$imputations
}
M <- length(dat.list)
if (M == 1) {
dat0 <- dat.list[[1]]
dat0[, "__dummy"] <- 1
dat0[1, "__dummy"] <- NA
dat.list <- list(dat0, dat0)
M <- 2
}
datl1 <- dat.list[[1]]
datl1 <- as.data.frame(datl1)
datl2 <- matrix(NA, nrow = nrow(datl1), ncol = ncol(datl1))
colnames(datl2) <- colnames(datl1)
VV <- ncol(datl1)
for (vv in 1:VV) {
datl2[, vv] <- as.vector(datl1[, vv])
}
datl1 <- as.data.frame(datl2)
cM <- colMeans(is.na(datl1))
impvars <- which(cM == 0)
r1 <- 1 * is.na(datl1)
if (M > 1) {
if (progress) {
cat("Analyze missing pattern\n-")
utils::flush.console()
}
for (ii in 2:M) {
datl2 <- dat.list[[ii]]
r1[, impvars] <- r1[, impvars] + 1 * (datl2[, impvars] !=
datl1[, impvars])
datl1 <- datl2
if (progress) {
cat("-")
utils::flush.console()
}
}
}
if (progress) {
cat("\n")
utils::flush.console()
}
r1[r1 > 0] <- 1
dat0 <- datl1
dat0[r1 == 1] <- NA
imp0 <- mice::mice(dat0, maxit = 0, allow.na = TRUE)
imp0
iM <- imp0$method
elimvars <- names(cM)[cM > 0]
pM <- imp0$predictorMatrix
if (length(elimvars) > 0) {
iM[elimvars] <- ""
pM[elimvars, ] <- 0
pM[, elimvars] <- 0
}
imp1 <- mice::mice(dat0, maxit = 0, method = iM, predictorMatrix = pM,
m = M, allow.na = TRUE)
IMP <- imp1$imp
if (progress) {
cat("Create mids object\n")
utils::flush.console()
}
for (ii in 1:M) {
dat.ii <- dat.list[[ii]]
for (vv1 in seq(1, length(impvars))) {
vv <- names(impvars)[vv1]
l1 <- dat.ii[r1[, vv] == 1, vv]
if (length(l1) > 0) {
IMP[[vv]][ii] <- l1
}
}
if (progress) {
cat(".")
utils::flush.console()
}
}
IMP
imp1$imp <- IMP
View(imp1)
imp1$nmis == 0
imp0$nmis
dat0
dat.list[[1]]
imp0
View(imp0)
dat0
r1
CALL <- match.call()
if (inherits(dat.list, "imputationList")) {
dat.list <- dat.list$imputations
}
M <- length(dat.list)
if (M == 1) {
dat0 <- dat.list[[1]]
dat0[, "__dummy"] <- 1
dat0[1, "__dummy"] <- NA
dat.list <- list(dat0, dat0)
M <- 2
}
datl1 <- dat.list[[1]]
datl1 <- as.data.frame(datl1)
datl2 <- matrix(NA, nrow = nrow(datl1), ncol = ncol(datl1))
colnames(datl2) <- colnames(datl1)
VV <- ncol(datl1)
for (vv in 1:VV) {
datl2[, vv] <- as.vector(datl1[, vv])
}
datl1 <- as.data.frame(datl2)
datl1
cM <- colMeans(is.na(datl1))
impvars <- which(cM == 0)
r1 <- 1 * is.na(datl1)
r1
M
impvars
datl1
is.na(datl1)
cM <- colMeans(is.na(datl1))
impvars <- which(cM == 0)
r1 <- 1 * is.na(datl1)
impvars
r1
dat0
data(nhanes,package="mice")
set.seed(566)  # fix random seed
# impute 10 datasets using Amelia
a.out <- Amelia::amelia(x=nhanes, m=10)
# plot of observed and imputed data
plot(a.out)
# convert list of multiply imputed datasets into a mids object
a.mids <- miceadds::datlist2mids( a.out$imputations )
a.out$imputations[[1]]
a.mids$imputations[[1]]
a.mids$imp[[1]]
View(a.mids)
a.out$imputations[[2]]
datlist2mids(imputations)
imputation.mids <- datlist2mids(imputations)
View(imputation.mids)
imputations[[1]]
View(imputation.mids)
?mice
?mice
imp <- mice(nhanes)
View(imp)
imp$bmi
?as.mids
impute the nhanes dataset
imp <- mice(nhanes, print = FALSE)
# extract the data in long format
X <- complete(imp, action = "long", include = TRUE)
# create dataset with .imp variable as numeric
X2 <- X
X2
test1 <- as.mids(X)
test1
